#!/usr/bin/env python

# author: Seth Nielsen and James Jackson

import rospy
from rosflight_msgs.msg import RCRaw, Status
from std_msgs.msg import String
from rosflight_keyboard_base import rosflight_keyboard_base

class rosflight_keyboard_RC(rosflight_keyboard_base):
    def __init__(self, device = 0):
        rosflight_keyboard_base.__init__(self, device)

        rospy.init_node('rc_keyboard')
        rospy.loginfo("[rc_keyboard] initing")

        self.rc_pub = rospy.Publisher('RC', RCRaw, queue_size=10)

        self.status_sub = rospy.Subscriber('status', Status, self.status_callback)
        # waiting until firmware version is published avoids some "Unable to arm" errors
        self.version_sub = rospy.Subscriber('version', String, self.version_callback)

        self.init = False
        self.is_armed = False
        self.got_version = False
        self.auto_arm = rospy.get_param('~auto_arm', False)
        if not self.auto_arm:
            self.init = True
        self.rate = rospy.Rate(50)
        if self.auto_arm:
            rospy.logwarn("[rc_keyboard] auto-arming is ON. Waiting for firmware version")
        else:
            rospy.loginfo("[rc_keyboard] auto-arming is OFF.")

    def run(self):
        while not rospy.is_shutdown():

            if self.auto_arm and not self.init:
                if self.got_version:
                    self.arm()
                    if self.is_armed:
                        self.values['aux2'] = -1
                        self.init = True
                        rospy.loginfo("[rc_keyboard] auto-arming successful")
                else:
                    continue

            if self.init:
                self.update()

            msg = RCRaw()
            msg.header.stamp = rospy.Time.now()    # key: action
            msg.values[0] = self.get_value('x')    # left/right: roll
            msg.values[1] = self.get_value('y')    # up/down: pitch
            msg.values[2] = self.get_value('F')    # w/s: throttle
            msg.values[3] = self.get_value('z')    # a/d: yaw
            msg.values[4] = self.get_value('aux1') # m: arm toggle (assumes ARM_CHANNEL=4)
            msg.values[5] = self.get_value('aux2') # o: rc override toggle
            msg.values[6] = self.get_value('aux3')
            msg.values[7] = self.get_value('aux4')

            self.rc_pub.publish(msg)
            self.rate.sleep()

        self.quit()


    def get_value(self, key):
        return int(self.values[key] * 500 + 1500)

    def arm(self):
        self.values['aux2'] = 1  # rc override ON
        self.values['aux1'] = 1  # arm toggle ON
        self.values['F'] = -1    # throttle to 0%

        # In case ARM_CHANNEL is not set, this will be required to arm
        self.values['z'] = 1     # yaw at 100%
        return

    def status_callback(self, msg):
        self.is_armed = msg.armed

    def version_callback(self, msg):
        self.got_version = True
        self.version_sub.unregister()

if __name__ == "__main__":
    rck = rosflight_keyboard_RC()
    try:
        rck.run()
    except rospy.ROSInterruptException as e:
        pass
