#!/usr/bin/env python

import rospy
from rosflight_msgs.msg import Command
from rosflight_joystick_base import rosflight_joystick_base
from time import sleep

class rosflight_joystick_velocity(rosflight_joystick_base):
    def __init__(self, device = 0):
        rosflight_joystick_base.__init__(self, device)

        rospy.init_node('velocity_command_joy')
        rc_pub = rospy.Publisher('velocity_command', Command, queue_size=10)

        current_alt_setpoint = 0.0

        while not rospy.is_shutdown():
            if self.update():
                msg = Command()
                msg.header.stamp = rospy.Time.now()

                msg = Command()
                msg.header.stamp = rospy.Time.now()

                msg.mode = Command.MODE_XVEL_YVEL_YAWRATE_ALTITUDE
                msg.ignore = Command.IGNORE_NONE

                # Apply a deadzone for altitude
                current_alt_setpoint -= 0.01 * self.get_value('F')
                msg.y = self.get_value('x') * 2.0
                msg.x = self.get_value('y') * -2.0
                msg.z = self.get_value('z') * 1.507
                msg.F = current_alt_setpoint

                rc_pub.publish(msg)
            sleep(0.02)

    def get_value(self, key):
        if abs(self.values[key]) > 0.15:
            return self.values[key]
        else:
            return 0.0

if __name__ == "__main__":
    joy_object = rosflight_joystick_velocity()
